{"version":3,"file":"ej2-angular-treegrid.js","sources":["~/@syncfusion/ej2-angular-treegrid/src/treegrid/columns.directive.ts","~/@syncfusion/ej2-angular-treegrid/src/treegrid/aggregate-columns.directive.ts","~/@syncfusion/ej2-angular-treegrid/src/treegrid/aggregates.directive.ts","~/@syncfusion/ej2-angular-treegrid/src/treegrid/treegrid.component.ts","~/@syncfusion/ej2-angular-treegrid/src/treegrid/treegrid.module.ts","~/@syncfusion/ej2-angular-treegrid/src/treegrid/treegrid-all.module.ts","~/@syncfusion/ej2-angular-treegrid/ej2-angular-treegrid.ts"],"names":["input","outputs","__decorate","__metadata"],"mappings":"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","sourcesContent":["import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['allowEditing', 'allowFiltering', 'allowReordering', 'allowResizing', 'allowSorting', 'clipMode', 'columns', 'commands', 'customAttributes', 'defaultValue', 'disableHtmlEncode', 'displayAsCheckBox', 'edit', 'editTemplate', 'editType', 'field', 'filter', 'filterBarTemplate', 'filterTemplate', 'format', 'formatter', 'headerTemplate', 'headerText', 'headerTextAlign', 'hideAtMedia', 'isFrozen', 'isIdentity', 'isPrimaryKey', 'lockColumn', 'maxWidth', 'minWidth', 'showCheckbox', 'showColumnMenu', 'showInColumnChooser', 'sortComparer', 'template', 'textAlign', 'type', 'uid', 'validationRules', 'valueAccessor', 'visible', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * `e-column` directive represent a column of the Angular TreeGrid. \n * It must be contained in a TreeGrid component(`ejs-treegrid`). \n * ```html\n * <ejs-treegrid [dataSource]='data' allowPaging='true' allowSorting='true'> \n *   <e-columns>\n *    <e-column field='ID' width='100'></e-column>\n *    <e-column field='name' headerText='Name' width='100'></e-column>\n *   </e-columns>\n * </ejs-treegrid>\n * ```\n */\nexport class ColumnDirective extends ComplexBase<ColumnDirective> {\npublic directivePropList: any;\n/**\n * Defines the data type of the column.\n * \\@default null\n * \\@blazortype Syncfusion.Blazor.Grids.ColumnType\n * \\@blazordefaultvalueignore\n */\npublic type: any;\n/**\n * If `allowEditing` set to false, then it disables editing of a particular column. \n * By default all columns are editable.\n * \\@default true\n */\npublic allowEditing: any;\n/**\n * If `allowFiltering` set to false, then it disables filtering option and filter bar element of a particular column. \n * By default all columns are filterable.\n * \\@default true\n */\npublic allowFiltering: any;\n/**\n * If `allowReordering` set to false, then it disables reorder of a particular column. \n * By default all columns can be reorder.\n * \\@default true\n */\npublic allowReordering: any;\n/**\n * If `allowResizing` set to false, it disables resize option of a particular column.\n * \\@default true\n */\npublic allowResizing: any;\n/**\n * If `allowSorting` set to false, then it disables sorting option of a particular column. \n * By default all columns are sortable.\n * \\@default true\n */\npublic allowSorting: any;\n/**\n * Defines the cell content's overflow mode. The available modes are \n * * `Clip` -  Truncates the cell content when it overflows its area. \n * * `Ellipsis` -  Displays ellipsis when the cell content overflows its area. \n * * `EllipsisWithTooltip` - Displays ellipsis when the cell content overflows its area \n * also it will display tooltip while hover on ellipsis applied cell.\n * \\@default Syncfusion.EJ2.Grids.ClipMode.Ellipsis\n * \\@isenumeration true\n * \\@asptype Syncfusion.EJ2.Grids.ClipMode\n * \\@blazortype Syncfusion.Blazor.Grids.ClipMode\n */\npublic clipMode: any;\n/**\n * Used to render multiple header rows(stacked headers) on TreeGrid header.\n * \\@default null\n */\npublic columns: any;\n/**\n * `commands` provides an option to display command buttons in every cell. \n * The available built-in command buttons are \n * * Edit - Edit the record. \n * * Delete - Delete the record. \n * * Save - Save the record. \n * * Cancel - Cancel the edit state.\n * \n * The following code example implements the custom command column.\n * ```html\n * <style type=\"text/css\" class=\"cssStyles\">\n * .details-icon:before\n * {\n *   content:\"\\e74d\";\n * }\n * </style>\n * <div id=\"TreeGrid\"></div>\n * ```\n * ```typescript\n * var gridObj = new TreeGrid({\n * datasource: window.gridData,\n * columns : [\n * { field: 'CustomerID', headerText: 'Customer ID' },\n * { field: 'CustomerName', headerText: 'Customer Name' },\n * {commands: [{buttonOption:{content: 'Details', click: onClick, cssClass: details-icon}}], headerText: 'Customer Details'}\n * ]\n * gridObj.appendTo(\"#TreeGrid\");\n * ```     \n * \\@default null\n */\npublic commands: any;\n/**\n * The CSS styles and attributes of the content cells of a particular column can be customized.\n * \\@default null\n */\npublic customAttributes: any;\n/**\n * Defines default values for the component when adding a new record to the TreeGrid.\n * \\@default null\n * \\@blazortype object\n */\npublic defaultValue: any;\n/**\n * If `disableHtmlEncode` is set to true, it encodes the HTML of the header and content cells.\n * \\@default true\n */\npublic disableHtmlEncode: any;\n/**\n * If `displayAsCheckBox` is set to true, it displays the column value as a check box instead of Boolean value.\n * \\@default false\n */\npublic displayAsCheckBox: any;\n/**\n * Defines the `IEditCell` object to customize default edit cell.\n * \\@default {}\n */\npublic edit: any;\n/**\n * Defines the type of component for editing.\n * \\@default 'stringedit'\n * \\@blazortype Syncfusion.Blazor.Grids.EditType\n * \\@blazordefaultvalue Syncfusion.Blazor.Grids.EditType.DefaultEdit\n */\npublic editType: any;\n/**\n * Defines the field name of column which is mapped with mapping name of DataSource. \n * The bounded columns can be sort, filter etc., \n * The `field` name must be a valid JavaScript identifier, \n * the first character must be an alphabet and should not contain spaces and special characters.\n * \\@default 'undefined'\n * \\@blazordefaultvalue ''\n */\npublic field: any;\n/**\n *  Defines the filter options to customize filtering for the particular column. \n *  \\@default null\n */\npublic filter: any;\n/**\n * The `filterBarTemplate` is used to add a custom component instead of default input component for filter bar. \n * It have create and read functions. \n * * create: It is used for creating custom components. \n * * read: It is used to perform custom filter action.\n * \n * ```html\n * <div id=\"TreeGrid\"></div>\n * ```\n * ```typescript\n * let gridObj: TreeGrid = new TreeGrid({\n * dataSource: filterData,\n * columns: [\n *  { field: 'OrderID', headerText: 'Order ID' },\n *  {\n *     field: 'EmployeeID', filterBarTemplate: {\n *        create: (args: { element: Element, column: Column }) => {\n *             let input: HTMLInputElement = document.createElement('input');\n *             input.id = 'EmployeeID';\n *             input.type = 'text';\n *             return input;\n *        },\n *        write: (args: { element: Element, column: Column }) => {\n *            args.element.addEventListener('input', args.column.filterBarTemplate.read as EventListener);\n *        },\n *        read: (args: { element: HTMLInputElement, columnIndex: number, column: Column }) => {\n *            gridObj.filterByColumn(args.element.id, 'equal', args.element.value);\n *       }\n *    }\n * }],\n *  allowFiltering: true\n * });\n * gridObj.appendTo('#TreeGrid');\n * ```\n *     \n * \\@default null\n */\npublic filterBarTemplate: any;\n/**\n * It is used to change display value with the given format and does not affect the original data. \n * Gets the format from the user which can be standard or custom \n * [`number`](../../../common/internationalization/#supported-format-string) \n * and [`date`](../../../common/internationalization/#supported-format-string-1) formats.\n * \\@default null\n * \\@asptype string\n * \\@blazortype string\n */\npublic format: any;\n/**\n * Defines the method which is used to achieve custom formatting from an external function. \n * This function triggers before rendering of each cell.\n * \\@default null\n */\npublic formatter: any;\n/**\n * Defines the header text of column which is used to display in column header. \n * If `headerText` is not defined, then field name value will be assigned to header text.\n * \\@default 'undefined'\n */\npublic headerText: any;\n/**\n * Define the alignment of column header which is used to align the text of column header.\n * \\@default null\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalueignore\n * \\@isenumeration true\n * \\@asptype Syncfusion.EJ2.Grids.TextAlign\n * \\@blazortype Syncfusion.Blazor.Grids.TextAlign\n */\npublic headerTextAlign: any;\n/**\n * Column visibility can change based on [`Media Queries`](http://cssmediaqueries.com/what-are-css-media-queries.html). \n * `hideAtMedia` accepts only valid Media Queries.\n * \\@default 'undefined'\n */\npublic hideAtMedia: any;\n/**\n * You can use this property to freeze selected columns in grid.\n * \\@default false\n */\npublic isFrozen: any;\n/**\n * If `isIdentity` is set to true, then this column is considered as identity column.\n * \\@default false\n */\npublic isIdentity: any;\n/**\n * If `isPrimaryKey` is set to true, considers this column as the primary key constraint.\n * \\@default false\n */\npublic isPrimaryKey: any;\n/**\n * If `lockColumn` set to true, then it disables Reordering of a particular column. \n * The locked column will be moved to first position.\n * \\@default false\n */\npublic lockColumn: any;\n/**\n * Defines the maximum width of the column in pixels or percentage, which will restrict resizing beyond this pixels or percentage.\n * \\@default 'undefined'\n */\npublic maxWidth: any;\n/**\n * Defines the minimum width of the column in pixels or percentage.\n * \\@default 'undefined'\n */\npublic minWidth: any;\n/**\n * If `showCheckbox` set to true, then the checkboxes will be displayed in particular column.\n * \\@default false\n */\npublic showCheckbox: any;\n/**\n * If `showColumnMenu` set to false, then it disable the column menu of a particular column. \n * By default column menu will show for all columns\n * \\@default true\n */\npublic showColumnMenu: any;\n/**\n * If `showInColumnChooser` set to false, then hide the particular column in column chooser. \n *  By default all columns are displayed in column Chooser.\n * \\@default true\n */\npublic showInColumnChooser: any;\n/**\n * Defines the sort comparer property.\n * \\@default 'undefined'\n */\npublic sortComparer: any;\n/**\n * Defines the alignment of the column in both header and content cells.\n * \\@default Syncfusion.EJ2.Grids.TextAlign.Left\n * \\@isenumeration true\n * \\@asptype Syncfusion.EJ2.Grids.TextAlign\n * \\@blazortype Syncfusion.Blazor.Grids.TextAlign\n */\npublic textAlign: any;\n/**\n * Gets the unique identifier value of the column. It is used to get the object.\n * \\@default 'undefined'\n */\npublic uid: any;\n/**\n * Defines rules to validate data before creating and updating.\n * \\@default null\n */\npublic validationRules: any;\n/**\n * Defines the method used to apply custom cell values from external function and display this on each cell rendered.\n * \\@default null\n */\npublic valueAccessor: any;\n/**\n * If `visible` is set to false, hides the particular column. By default, columns are displayed.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the width of the column in pixels or percentage.\n * \\@default 'undefined'\n */\npublic width: any;\n/**\n * Defines the column template that renders customized element in each cell of the column. \n * It accepts either [template string](../../../common/template-engine/) or HTML element ID.\n * \\@default null\n */\n@Template()\n    public template: any;\n/**\n * Defines the header template as string or HTML element ID which is used to add customized element in the column header.\n * \\@default null\n */\n@Template()\n    public headerTemplate: any;\n    \n    @Template()\npublic filter_itemTemplate: any;\n/**\n * Defines the filter template/UI that is used as filter for a particular column. \n * It accepts either template string or HTML element ID.\n * \\@aspignore\n */\n@Template()\n    public filterTemplate: any;\n    \n    @Template()\npublic commandsTemplate: any;\n/**\n * Defines the cell edit template that used as editor for a particular column. \n * It accepts either template string or HTML element ID.\n * \\@aspignore\n */\n@Template()\n    public editTemplate: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-treegrid>e-columns>e-column',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ContentChild, args: ['template', ] },],\n'headerTemplate': [{ type: ContentChild, args: ['headerTemplate', ] },],\n'filter_itemTemplate': [{ type: ContentChild, args: ['filterItemTemplate', ] },],\n'filterTemplate': [{ type: ContentChild, args: ['filterTemplate', ] },],\n'commandsTemplate': [{ type: ContentChild, args: ['commandsTemplate', ] },],\n'editTemplate': [{ type: ContentChild, args: ['editTemplate', ] },],\n};\n}\n\nfunction ColumnDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColumnDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColumnDirective.ctorParameters;\n/** @type {?} */\nColumnDirective.propDecorators;\n/** @type {?} */\nColumnDirective.prototype.directivePropList;\n/**\n * Defines the data type of the column.\n * \\@default null\n * \\@blazortype Syncfusion.Blazor.Grids.ColumnType\n * \\@blazordefaultvalueignore\n * @type {?}\n */\nColumnDirective.prototype.type;\n/**\n * If `allowEditing` set to false, then it disables editing of a particular column. \n * By default all columns are editable.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.allowEditing;\n/**\n * If `allowFiltering` set to false, then it disables filtering option and filter bar element of a particular column. \n * By default all columns are filterable.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.allowFiltering;\n/**\n * If `allowReordering` set to false, then it disables reorder of a particular column. \n * By default all columns can be reorder.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.allowReordering;\n/**\n * If `allowResizing` set to false, it disables resize option of a particular column.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.allowResizing;\n/**\n * If `allowSorting` set to false, then it disables sorting option of a particular column. \n * By default all columns are sortable.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.allowSorting;\n/**\n * Defines the cell content's overflow mode. The available modes are \n * * `Clip` -  Truncates the cell content when it overflows its area. \n * * `Ellipsis` -  Displays ellipsis when the cell content overflows its area. \n * * `EllipsisWithTooltip` - Displays ellipsis when the cell content overflows its area \n * also it will display tooltip while hover on ellipsis applied cell.\n * \\@default Syncfusion.EJ2.Grids.ClipMode.Ellipsis\n * \\@isenumeration true\n * \\@asptype Syncfusion.EJ2.Grids.ClipMode\n * \\@blazortype Syncfusion.Blazor.Grids.ClipMode\n * @type {?}\n */\nColumnDirective.prototype.clipMode;\n/**\n * Used to render multiple header rows(stacked headers) on TreeGrid header.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.columns;\n/**\n * `commands` provides an option to display command buttons in every cell. \n * The available built-in command buttons are \n * * Edit - Edit the record. \n * * Delete - Delete the record. \n * * Save - Save the record. \n * * Cancel - Cancel the edit state.\n * \n * The following code example implements the custom command column.\n * ```html\n * <style type=\"text/css\" class=\"cssStyles\">\n * .details-icon:before\n * {\n *   content:\"\\e74d\";\n * }\n * </style>\n * <div id=\"TreeGrid\"></div>\n * ```\n * ```typescript\n * var gridObj = new TreeGrid({\n * datasource: window.gridData,\n * columns : [\n * { field: 'CustomerID', headerText: 'Customer ID' },\n * { field: 'CustomerName', headerText: 'Customer Name' },\n * {commands: [{buttonOption:{content: 'Details', click: onClick, cssClass: details-icon}}], headerText: 'Customer Details'}\n * ]\n * gridObj.appendTo(\"#TreeGrid\");\n * ```     \n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.commands;\n/**\n * The CSS styles and attributes of the content cells of a particular column can be customized.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.customAttributes;\n/**\n * Defines default values for the component when adding a new record to the TreeGrid.\n * \\@default null\n * \\@blazortype object\n * @type {?}\n */\nColumnDirective.prototype.defaultValue;\n/**\n * If `disableHtmlEncode` is set to true, it encodes the HTML of the header and content cells.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.disableHtmlEncode;\n/**\n * If `displayAsCheckBox` is set to true, it displays the column value as a check box instead of Boolean value.\n * \\@default false\n * @type {?}\n */\nColumnDirective.prototype.displayAsCheckBox;\n/**\n * Defines the `IEditCell` object to customize default edit cell.\n * \\@default {}\n * @type {?}\n */\nColumnDirective.prototype.edit;\n/**\n * Defines the type of component for editing.\n * \\@default 'stringedit'\n * \\@blazortype Syncfusion.Blazor.Grids.EditType\n * \\@blazordefaultvalue Syncfusion.Blazor.Grids.EditType.DefaultEdit\n * @type {?}\n */\nColumnDirective.prototype.editType;\n/**\n * Defines the field name of column which is mapped with mapping name of DataSource. \n * The bounded columns can be sort, filter etc., \n * The `field` name must be a valid JavaScript identifier, \n * the first character must be an alphabet and should not contain spaces and special characters.\n * \\@default 'undefined'\n * \\@blazordefaultvalue ''\n * @type {?}\n */\nColumnDirective.prototype.field;\n/**\n *  Defines the filter options to customize filtering for the particular column. \n *  \\@default null\n * @type {?}\n */\nColumnDirective.prototype.filter;\n/**\n * The `filterBarTemplate` is used to add a custom component instead of default input component for filter bar. \n * It have create and read functions. \n * * create: It is used for creating custom components. \n * * read: It is used to perform custom filter action.\n * \n * ```html\n * <div id=\"TreeGrid\"></div>\n * ```\n * ```typescript\n * let gridObj: TreeGrid = new TreeGrid({\n * dataSource: filterData,\n * columns: [\n *  { field: 'OrderID', headerText: 'Order ID' },\n *  {\n *     field: 'EmployeeID', filterBarTemplate: {\n *        create: (args: { element: Element, column: Column }) => {\n *             let input: HTMLInputElement = document.createElement('input');\n *             input.id = 'EmployeeID';\n *             input.type = 'text';\n *             return input;\n *        },\n *        write: (args: { element: Element, column: Column }) => {\n *            args.element.addEventListener('input', args.column.filterBarTemplate.read as EventListener);\n *        },\n *        read: (args: { element: HTMLInputElement, columnIndex: number, column: Column }) => {\n *            gridObj.filterByColumn(args.element.id, 'equal', args.element.value);\n *       }\n *    }\n * }],\n *  allowFiltering: true\n * });\n * gridObj.appendTo('#TreeGrid');\n * ```\n *     \n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.filterBarTemplate;\n/**\n * It is used to change display value with the given format and does not affect the original data. \n * Gets the format from the user which can be standard or custom \n * [`number`](../../../common/internationalization/#supported-format-string) \n * and [`date`](../../../common/internationalization/#supported-format-string-1) formats.\n * \\@default null\n * \\@asptype string\n * \\@blazortype string\n * @type {?}\n */\nColumnDirective.prototype.format;\n/**\n * Defines the method which is used to achieve custom formatting from an external function. \n * This function triggers before rendering of each cell.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.formatter;\n/**\n * Defines the header text of column which is used to display in column header. \n * If `headerText` is not defined, then field name value will be assigned to header text.\n * \\@default 'undefined'\n * @type {?}\n */\nColumnDirective.prototype.headerText;\n/**\n * Define the alignment of column header which is used to align the text of column header.\n * \\@default null\n * \\@aspdefaultvalueignore\n * \\@blazordefaultvalueignore\n * \\@isenumeration true\n * \\@asptype Syncfusion.EJ2.Grids.TextAlign\n * \\@blazortype Syncfusion.Blazor.Grids.TextAlign\n * @type {?}\n */\nColumnDirective.prototype.headerTextAlign;\n/**\n * Column visibility can change based on [`Media Queries`](http://cssmediaqueries.com/what-are-css-media-queries.html). \n * `hideAtMedia` accepts only valid Media Queries.\n * \\@default 'undefined'\n * @type {?}\n */\nColumnDirective.prototype.hideAtMedia;\n/**\n * You can use this property to freeze selected columns in grid.\n * \\@default false\n * @type {?}\n */\nColumnDirective.prototype.isFrozen;\n/**\n * If `isIdentity` is set to true, then this column is considered as identity column.\n * \\@default false\n * @type {?}\n */\nColumnDirective.prototype.isIdentity;\n/**\n * If `isPrimaryKey` is set to true, considers this column as the primary key constraint.\n * \\@default false\n * @type {?}\n */\nColumnDirective.prototype.isPrimaryKey;\n/**\n * If `lockColumn` set to true, then it disables Reordering of a particular column. \n * The locked column will be moved to first position.\n * \\@default false\n * @type {?}\n */\nColumnDirective.prototype.lockColumn;\n/**\n * Defines the maximum width of the column in pixels or percentage, which will restrict resizing beyond this pixels or percentage.\n * \\@default 'undefined'\n * @type {?}\n */\nColumnDirective.prototype.maxWidth;\n/**\n * Defines the minimum width of the column in pixels or percentage.\n * \\@default 'undefined'\n * @type {?}\n */\nColumnDirective.prototype.minWidth;\n/**\n * If `showCheckbox` set to true, then the checkboxes will be displayed in particular column.\n * \\@default false\n * @type {?}\n */\nColumnDirective.prototype.showCheckbox;\n/**\n * If `showColumnMenu` set to false, then it disable the column menu of a particular column. \n * By default column menu will show for all columns\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.showColumnMenu;\n/**\n * If `showInColumnChooser` set to false, then hide the particular column in column chooser. \n *  By default all columns are displayed in column Chooser.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.showInColumnChooser;\n/**\n * Defines the sort comparer property.\n * \\@default 'undefined'\n * @type {?}\n */\nColumnDirective.prototype.sortComparer;\n/**\n * Defines the alignment of the column in both header and content cells.\n * \\@default Syncfusion.EJ2.Grids.TextAlign.Left\n * \\@isenumeration true\n * \\@asptype Syncfusion.EJ2.Grids.TextAlign\n * \\@blazortype Syncfusion.Blazor.Grids.TextAlign\n * @type {?}\n */\nColumnDirective.prototype.textAlign;\n/**\n * Gets the unique identifier value of the column. It is used to get the object.\n * \\@default 'undefined'\n * @type {?}\n */\nColumnDirective.prototype.uid;\n/**\n * Defines rules to validate data before creating and updating.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.validationRules;\n/**\n * Defines the method used to apply custom cell values from external function and display this on each cell rendered.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.valueAccessor;\n/**\n * If `visible` is set to false, hides the particular column. By default, columns are displayed.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.visible;\n/**\n * Defines the width of the column in pixels or percentage.\n * \\@default 'undefined'\n * @type {?}\n */\nColumnDirective.prototype.width;\n/**\n * Defines the column template that renders customized element in each cell of the column. \n * It accepts either [template string](../../../common/template-engine/) or HTML element ID.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.template;\n/**\n * Defines the header template as string or HTML element ID which is used to add customized element in the column header.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.headerTemplate;\n/** @type {?} */\nColumnDirective.prototype.filter_itemTemplate;\n/**\n * Defines the filter template/UI that is used as filter for a particular column. \n * It accepts either template string or HTML element ID.\n * \\@aspignore\n * @type {?}\n */\nColumnDirective.prototype.filterTemplate;\n/** @type {?} */\nColumnDirective.prototype.commandsTemplate;\n/**\n * Defines the cell edit template that used as editor for a particular column. \n * It accepts either template string or HTML element ID.\n * \\@aspignore\n * @type {?}\n */\nColumnDirective.prototype.editTemplate;\n/** @type {?} */\nColumnDirective.prototype.viewContainerRef;\n}\n\n/**\n * Column Array Directive\n */\nexport class ColumnsDirective extends ArrayBase<ColumnsDirective> {\nconstructor() {\n        super('columns');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-treegrid>e-columns',\n    queries: {\n        children: new ContentChildren(ColumnDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ColumnsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColumnsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColumnsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['columnName', 'customAggregate', 'field', 'footerTemplate', 'format', 'type'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * `e-aggregate->e-column` directive represent a aggregate column of the Angular TreeGrid. \n * ```html\n * <ejs-treegrid [dataSource]='data' allowPaging='true' allowSorting='true'> \n *   <e-columns>\n *     <e-column field='ID' width='100'></e-column>\n *     <e-column field='name' headerText='Name' width='100'></e-column>\n *   </e-columns>\n *   <e-aggregates>\n *     <e-aggregate>\n *       <e-columns>\n *         <e-column field='ID' type='Min'></e-column>\n *       </e-columns>\n *      </e-aggregate>\n *    </e-aggregates>\n * </ejs-treegrid>\n * ```\n */\nexport class AggregateColumnDirective extends ComplexBase<AggregateColumnDirective> {\npublic directivePropList: any;\n/**\n * Defines the aggregate type of a particular column. \n * To use multiple aggregates for single column, specify the `type` as array. \n * Types of aggregate are, \n * * sum \n * * average \n * * max \n * * min \n * * count \n * * falsecount \n * * truecount \n * * custom \n * > Specify the `type` value as `custom` to use custom aggregation.\n * \\@asptype string\n * \\@default null\n */\npublic type: any;\n/**\n * Defines the column name to display the aggregate value. If `columnName` is not defined, \n * then `field` name value will be assigned to the `columnName` property.\n * \\@default null\n */\npublic columnName: any;\n/**\n * Defines a function to calculate custom aggregate value. The `type` value should be set to `custom`. \n * To use custom aggregate value in the template, use the key as `${custom}`. \n * **Total aggregation**: The custom function will be called with the whole data and the current `AggregateColumn` object. \n * **Group aggregation**: This will be called with the current group details and the `AggregateColumn` object.\n * \\@default null\n */\npublic customAggregate: any;\n/**\n * Defines the column name to perform aggregation.\n * \\@default null\n */\npublic field: any;\n/**\n * Format is applied to a calculated value before it is displayed. \n * Gets the format from the user, which can be standard or custom \n * [`number`](../../../common/internationalization/#supported-format-string) \n * and [`date`](../../../common/internationalization/#supported-format-string-1) formats.\n * \\@asptype string\n * \\@blazortype string\n * \\@default null\n */\npublic format: any;\n/**\n * Defines the footer cell template as a string for the aggregate column. \n * The `type` name should be used to access aggregate values inside the template.\n * \n * {% codeBlock src=\"grid/footer-template-api/index.ts\" %}{% endcodeBlock %}     \n * \\@default null\n */\n@Template()\n    public footerTemplate: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-treegrid>e-aggregates>e-aggregate>e-columns>e-column',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'footerTemplate': [{ type: ContentChild, args: ['footerTemplate', ] },],\n};\n}\n\nfunction AggregateColumnDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAggregateColumnDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAggregateColumnDirective.ctorParameters;\n/** @type {?} */\nAggregateColumnDirective.propDecorators;\n/** @type {?} */\nAggregateColumnDirective.prototype.directivePropList;\n/**\n * Defines the aggregate type of a particular column. \n * To use multiple aggregates for single column, specify the `type` as array. \n * Types of aggregate are, \n * * sum \n * * average \n * * max \n * * min \n * * count \n * * falsecount \n * * truecount \n * * custom \n * > Specify the `type` value as `custom` to use custom aggregation.\n * \\@asptype string\n * \\@default null\n * @type {?}\n */\nAggregateColumnDirective.prototype.type;\n/**\n * Defines the column name to display the aggregate value. If `columnName` is not defined, \n * then `field` name value will be assigned to the `columnName` property.\n * \\@default null\n * @type {?}\n */\nAggregateColumnDirective.prototype.columnName;\n/**\n * Defines a function to calculate custom aggregate value. The `type` value should be set to `custom`. \n * To use custom aggregate value in the template, use the key as `${custom}`. \n * **Total aggregation**: The custom function will be called with the whole data and the current `AggregateColumn` object. \n * **Group aggregation**: This will be called with the current group details and the `AggregateColumn` object.\n * \\@default null\n * @type {?}\n */\nAggregateColumnDirective.prototype.customAggregate;\n/**\n * Defines the column name to perform aggregation.\n * \\@default null\n * @type {?}\n */\nAggregateColumnDirective.prototype.field;\n/**\n * Format is applied to a calculated value before it is displayed. \n * Gets the format from the user, which can be standard or custom \n * [`number`](../../../common/internationalization/#supported-format-string) \n * and [`date`](../../../common/internationalization/#supported-format-string-1) formats.\n * \\@asptype string\n * \\@blazortype string\n * \\@default null\n * @type {?}\n */\nAggregateColumnDirective.prototype.format;\n/**\n * Defines the footer cell template as a string for the aggregate column. \n * The `type` name should be used to access aggregate values inside the template.\n * \n * {% codeBlock src=\"grid/footer-template-api/index.ts\" %}{% endcodeBlock %}     \n * \\@default null\n * @type {?}\n */\nAggregateColumnDirective.prototype.footerTemplate;\n/** @type {?} */\nAggregateColumnDirective.prototype.viewContainerRef;\n}\n\n/**\n * AggregateColumn Array Directive\n */\nexport class AggregateColumnsDirective extends ArrayBase<AggregateColumnsDirective> {\nconstructor() {\n        super('columns');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-treegrid>e-aggregates>e-aggregate>e-columns',\n    queries: {\n        children: new ContentChildren(AggregateColumnDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AggregateColumnsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAggregateColumnsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAggregateColumnsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { AggregateColumnsDirective } from './aggregate-columns.directive';\n\nlet /** @type {?} */ input: string[] = ['columns', 'showChildSummary'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * `e-aggregate` directive represent a aggregate row of the Angular TreeGrid. \n * It must be contained in a TreeGrid component(`ejs-treegrid`). \n * ```html\n * <ejs-treegrid [dataSource]='data' allowPaging='true' allowSorting='true'> \n *   <e-columns>\n *     <e-column field='ID' width='100'></e-column>\n *     <e-column field='name' headerText='Name' width='100'></e-column>\n *   </e-columns>\n *   <e-aggregates>\n *     <e-aggregate>\n *       <e-columns>\n *         <e-column field='ID' type='Min'></e-column>\n *       </e-columns>\n *      </e-aggregate>\n *    </e-aggregates>\n * </ejs-treegrid>\n * ```\n */\nexport class AggregateDirective extends ComplexBase<AggregateDirective> {\npublic directivePropList: any;\npublic childColumns: any;\npublic tags: string[] = ['columns'];\n/**\n * Configures the aggregate columns.\n * \\@default []\n */\npublic columns: any;\n/**\n * Display the childSummary for each parent.\n */\npublic showChildSummary: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-treegrid>e-aggregates>e-aggregate',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childColumns: new ContentChild(AggregateColumnsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction AggregateDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAggregateDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAggregateDirective.ctorParameters;\n/** @type {?} */\nAggregateDirective.prototype.directivePropList;\n/** @type {?} */\nAggregateDirective.prototype.childColumns;\n/** @type {?} */\nAggregateDirective.prototype.tags;\n/**\n * Configures the aggregate columns.\n * \\@default []\n * @type {?}\n */\nAggregateDirective.prototype.columns;\n/**\n * Display the childSummary for each parent.\n * @type {?}\n */\nAggregateDirective.prototype.showChildSummary;\n/** @type {?} */\nAggregateDirective.prototype.viewContainerRef;\n}\n\n/**\n * Aggregate Array Directive\n */\nexport class AggregatesDirective extends ArrayBase<AggregatesDirective> {\nconstructor() {\n        super('aggregates');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-treegrid>e-aggregates',\n    queries: {\n        children: new ContentChildren(AggregateDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AggregatesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAggregatesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAggregatesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { TreeGrid } from '@syncfusion/ej2-treegrid';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { ColumnsDirective } from './columns.directive';\nimport { AggregatesDirective } from './aggregates.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['aggregates','allowExcelExport','allowFiltering','allowMultiSorting','allowPaging','allowPdfExport','allowReordering','allowResizing','allowRowDragAndDrop','allowSelection','allowSorting','allowTextWrap','autoCheckHierarchy','childMapping','clipMode','columnMenuItems','columnQueryMode','columns','contextMenuItems','copyHierarchyMode','dataSource','detailTemplate','editSettings','enableAltRow','enableAutoFill','enableCollapseAll','enableHover','enableImmutableMode','enablePersistence','enableRtl','enableVirtualization','expandStateMapping','filterSettings','frozenColumns','frozenRows','gridLines','hasChildMapping','height','idMapping','loadChildOnDemand','locale','pageSettings','parentIdMapping','printMode','query','rowDropSettings','rowHeight','rowTemplate','searchSettings','selectedRowIndex','selectionSettings','showColumnChooser','showColumnMenu','sortSettings','textWrapSettings','toolbar','treeColumnIndex','width'];\nexport const /** @type {?} */ outputs: string[] = ['actionBegin','actionComplete','actionFailure','batchAdd','batchCancel','batchDelete','beforeBatchAdd','beforeBatchDelete','beforeBatchSave','beforeCopy','beforeDataBound','beforeExcelExport','beforePaste','beforePdfExport','beforePrint','beginEdit','cellDeselected','cellDeselecting','cellEdit','cellSave','cellSaved','cellSelected','cellSelecting','checkboxChange','collapsed','collapsing','columnDrag','columnDragStart','columnDrop','columnMenuClick','columnMenuOpen','contextMenuClick','contextMenuOpen','created','dataBound','dataSourceChanged','dataStateChange','detailDataBound','excelExportComplete','excelHeaderQueryCellInfo','excelQueryCellInfo','expanded','expanding','headerCellInfo','load','pdfExportComplete','pdfHeaderQueryCellInfo','pdfQueryCellInfo','printComplete','queryCellInfo','recordDoubleClick','resizeStart','resizeStop','resizing','rowDataBound','rowDeselected','rowDeselecting','rowDrag','rowDragStart','rowDragStartHelper','rowDrop','rowSelected','rowSelecting','toolbarClick','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * `ejs-treegrid` represents the Angular TreeTreeGrid Component.\n * ```html\n * <ejs-treegrid [dataSource]='data' allowPaging='true' allowSorting='true'></ejs-treegrid>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class TreeGridComponent extends TreeGrid implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childColumns: QueryList<ColumnsDirective>;\npublic childAggregates: QueryList<AggregatesDirective>;\npublic tags: string[] = ['columns', 'aggregates'];\npublic dataSourceChange: any;\n    \n    @Template()\npublic toolbarTemplate: any;\n    \n    @Template()\npublic pagerTemplate: any;\n/**\n * The row template that renders customized rows from the given template. \n * By default, TreeGrid renders a table row for every data source item. \n * > * It accepts either [template string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) \n * or HTML element ID. \n * > * The row template must be a table row.\n * \n * > Check the [`Row Template`](../../treegrid/row) customization.\n * \n */\n@Template()\n    public rowTemplate: any;\n/**\n * The detail template allows you to show or hide additional information about a particular row.\n * \n * > It accepts either the [template string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n * or the HTML element ID.\n * \n * \n */\n@Template()\n    public detailTemplate: any;\n    \n    @Template()\npublic editSettings_template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('TreeGridFilter');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridPage');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridSort');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridReorder');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridToolbar');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridAggregate');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridResize');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridColumnMenu');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridExcelExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridPdfExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridCommandColumn');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridContextMenu');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridEdit');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridSelection');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridVirtualScroll');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridDetailRow');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridRowDD');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridFreeze');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridColumnChooser');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeGridLogger');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childColumns;\n        if (this.childAggregates) {\n                    this.tagObjects[1].instance = /** @type {?} */(( this.childAggregates as any));\n                }\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-treegrid',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childColumns: new ContentChild(ColumnsDirective), \n        childAggregates: new ContentChild(AggregatesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'toolbarTemplate': [{ type: ContentChild, args: ['toolbarTemplate', ] },],\n'pagerTemplate': [{ type: ContentChild, args: ['pagerTemplate', ] },],\n'rowTemplate': [{ type: ContentChild, args: ['rowTemplate', ] },],\n'detailTemplate': [{ type: ContentChild, args: ['detailTemplate', ] },],\n'editSettings_template': [{ type: ContentChild, args: ['editSettingsTemplate', ] },],\n};\n}\n\nfunction TreeGridComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTreeGridComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTreeGridComponent.ctorParameters;\n/** @type {?} */\nTreeGridComponent.propDecorators;\n/** @type {?} */\nTreeGridComponent.prototype.context;\n/** @type {?} */\nTreeGridComponent.prototype.tagObjects;\n/** @type {?} */\nTreeGridComponent.prototype.childColumns;\n/** @type {?} */\nTreeGridComponent.prototype.childAggregates;\n/** @type {?} */\nTreeGridComponent.prototype.tags;\n/** @type {?} */\nTreeGridComponent.prototype.dataSourceChange;\n/** @type {?} */\nTreeGridComponent.prototype.toolbarTemplate;\n/** @type {?} */\nTreeGridComponent.prototype.pagerTemplate;\n/**\n * The row template that renders customized rows from the given template. \n * By default, TreeGrid renders a table row for every data source item. \n * > * It accepts either [template string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) \n * or HTML element ID. \n * > * The row template must be a table row.\n * \n * > Check the [`Row Template`](../../treegrid/row) customization.\n * \n * @type {?}\n */\nTreeGridComponent.prototype.rowTemplate;\n/**\n * The detail template allows you to show or hide additional information about a particular row.\n * \n * > It accepts either the [template string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n * or the HTML element ID.\n * \n * \n * @type {?}\n */\nTreeGridComponent.prototype.detailTemplate;\n/** @type {?} */\nTreeGridComponent.prototype.editSettings_template;\n/** @type {?} */\nTreeGridComponent.prototype.registerEvents;\n/** @type {?} */\nTreeGridComponent.prototype.addTwoWay;\n/** @type {?} */\nTreeGridComponent.prototype.ngEle;\n/** @type {?} */\nTreeGridComponent.prototype.srenderer;\n/** @type {?} */\nTreeGridComponent.prototype.viewContainerRef;\n/** @type {?} */\nTreeGridComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ColumnDirective, ColumnsDirective } from './columns.directive';\nimport { AggregateColumnDirective, AggregateColumnsDirective } from './aggregate-columns.directive';\nimport { AggregateDirective, AggregatesDirective } from './aggregates.directive';\nimport { TreeGridComponent } from './treegrid.component';\n/**\n * NgModule definition for the TreeGrid component.\n */\nexport class TreeGridModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        TreeGridComponent,\n        ColumnDirective,\n        ColumnsDirective,\n        AggregateColumnDirective,\n        AggregateColumnsDirective,\n        AggregateDirective,\n        AggregatesDirective\n    ],\n    exports: [\n        TreeGridComponent,\n        ColumnDirective,\n        ColumnsDirective,\n        AggregateColumnDirective,\n        AggregateColumnsDirective,\n        AggregateDirective,\n        AggregatesDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TreeGridModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTreeGridModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTreeGridModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ColumnDirective, ColumnsDirective } from './columns.directive';\nimport { AggregateColumnDirective, AggregateColumnsDirective } from './aggregate-columns.directive';\nimport { AggregateDirective, AggregatesDirective } from './aggregates.directive';\nimport { TreeGridComponent } from './treegrid.component';\nimport { TreeGridModule } from './treegrid.module';\nimport {Filter, Page, Sort, Reorder, Toolbar, Aggregate, Resize, ColumnMenu, ExcelExport, PdfExport, CommandColumn, ContextMenu, Edit, Selection, VirtualScroll, DetailRow, RowDD, Freeze, ColumnChooser, Logger} from '@syncfusion/ej2-treegrid';\n\n\nexport const /** @type {?} */ FilterService: ValueProvider = { provide: 'TreeGridFilter', useValue: Filter};\nexport const /** @type {?} */ PageService: ValueProvider = { provide: 'TreeGridPage', useValue: Page};\nexport const /** @type {?} */ SortService: ValueProvider = { provide: 'TreeGridSort', useValue: Sort};\nexport const /** @type {?} */ ReorderService: ValueProvider = { provide: 'TreeGridReorder', useValue: Reorder};\nexport const /** @type {?} */ ToolbarService: ValueProvider = { provide: 'TreeGridToolbar', useValue: Toolbar};\nexport const /** @type {?} */ AggregateService: ValueProvider = { provide: 'TreeGridAggregate', useValue: Aggregate};\nexport const /** @type {?} */ ResizeService: ValueProvider = { provide: 'TreeGridResize', useValue: Resize};\nexport const /** @type {?} */ ColumnMenuService: ValueProvider = { provide: 'TreeGridColumnMenu', useValue: ColumnMenu};\nexport const /** @type {?} */ ExcelExportService: ValueProvider = { provide: 'TreeGridExcelExport', useValue: ExcelExport};\nexport const /** @type {?} */ PdfExportService: ValueProvider = { provide: 'TreeGridPdfExport', useValue: PdfExport};\nexport const /** @type {?} */ CommandColumnService: ValueProvider = { provide: 'TreeGridCommandColumn', useValue: CommandColumn};\nexport const /** @type {?} */ ContextMenuService: ValueProvider = { provide: 'TreeGridContextMenu', useValue: ContextMenu};\nexport const /** @type {?} */ EditService: ValueProvider = { provide: 'TreeGridEdit', useValue: Edit};\nexport const /** @type {?} */ SelectionService: ValueProvider = { provide: 'TreeGridSelection', useValue: Selection};\nexport const /** @type {?} */ VirtualScrollService: ValueProvider = { provide: 'TreeGridVirtualScroll', useValue: VirtualScroll};\nexport const /** @type {?} */ DetailRowService: ValueProvider = { provide: 'TreeGridDetailRow', useValue: DetailRow};\nexport const /** @type {?} */ RowDDService: ValueProvider = { provide: 'TreeGridRowDD', useValue: RowDD};\nexport const /** @type {?} */ FreezeService: ValueProvider = { provide: 'TreeGridFreeze', useValue: Freeze};\nexport const /** @type {?} */ ColumnChooserService: ValueProvider = { provide: 'TreeGridColumnChooser', useValue: ColumnChooser};\nexport const /** @type {?} */ LoggerService: ValueProvider = { provide: 'TreeGridLogger', useValue: Logger};\n/**\n * NgModule definition for the TreeGrid component with providers.\n */\nexport class TreeGridAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, TreeGridModule],\n    exports: [\n        TreeGridModule\n    ],\n    providers:[\n        FilterService,\n        PageService,\n        SortService,\n        ReorderService,\n        ToolbarService,\n        AggregateService,\n        ResizeService,\n        ColumnMenuService,\n        ExcelExportService,\n        PdfExportService,\n        CommandColumnService,\n        ContextMenuService,\n        EditService,\n        SelectionService,\n        VirtualScrollService,\n        DetailRowService,\n        RowDDService,\n        FreezeService,\n        ColumnChooserService,\n        LoggerService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TreeGridAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTreeGridAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTreeGridAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ColumnDirective,ColumnsDirective,AggregateColumnDirective,AggregateColumnsDirective,AggregateDirective,AggregatesDirective,TreeGridComponent,TreeGridModule,TreeGridAllModule,FilterService,PageService,SortService,ReorderService,ToolbarService,AggregateService,ResizeService,ColumnMenuService,ExcelExportService,PdfExportService,CommandColumnService,ContextMenuService,EditService,SelectionService,VirtualScrollService,DetailRowService,RowDDService,FreezeService,ColumnChooserService,LoggerService,TreeGrid,TreeGridModel,load,rowDataBound,dataBound,queryCellInfo,beforeDataBound,actionBegin,dataStateChange,actionComplete,rowSelecting,rowSelected,checkboxChange,rowDeselected,toolbarClick,beforeExcelExport,beforePdfExport,resizeStop,expanded,expanding,collapsed,collapsing,remoteExpand,localPagedExpandCollapse,pagingActions,printGridInit,contextMenuOpen,contextMenuClick,beforeCopy,beforePaste,savePreviousRowPosition,crudAction,beginEdit,beginAdd,recordDoubleClick,cellSave,cellSaved,cellEdit,batchDelete,batchCancel,batchAdd,beforeBatchDelete,beforeBatchAdd,beforeBatchSave,batchSave,keyPressed,updateData,doubleTap,virtualColumnIndex,virtualActionArgs,dataListener,indexModifier,beforeStartEdit,beforeBatchCancel,batchEditFormRendered,detailDataBound,rowDrag,rowDragStartHelper,rowDrop,rowDragStart,rowsAdd,rowsRemove,rowdraging,rowDropped,DataManipulation,ITreeData,TreeGridExcelExportProperties,TreeGridPdfExportProperties,AggregateTemplateContext,ITreeGridCellFormatter,RowExpandedEventArgs,RowExpandingEventArgs,RowCollapsedEventArgs,RowCollapsingEventArgs,CellSaveEventArgs,DataStateChangeEventArgs,Reorder,Resize,RowDD,Column,ColumnModel,EditSettings,EditSettingsModel,Predicate,FilterSettings,PredicateModel,FilterSettingsModel,PageSettings,PageSettingsModel,SearchSettings,SearchSettingsModel,SelectionSettings,SelectionSettingsModel,AggregateColumn,AggregateRow,AggregateColumnModel,AggregateRowModel,SortDescriptor,SortSettings,SortDescriptorModel,SortSettingsModel,RowDropSettings,RowDropSettingsModel,Render,TreeVirtualRowModelGenerator,isRemoteData,isCountRequired,isCheckboxcolumn,isFilterChildHierarchy,findParentRecords,getExpandStatus,findChildrenRecords,isOffline,extendArray,getPlainData,getParentData,isHidden,FilterHierarchyMode,ToolbarItems,ToolbarItem,PageSizeMode,ContextMenuItem,ContextMenuItems,EditMode,RowPosition,FilterType,WrapMode,CopyHierarchyType,Filter,ExcelExport,PdfExport,Page,Toolbar,Aggregate,Sort,TreeClipboard,ColumnMenu,ContextMenu,Edit,CommandColumn,Selection,DetailRow,VirtualScroll,TreeVirtual,Freeze,ColumnChooser,TreeItemDetails,Logger,treeGridDetails} from './public_api';\n\nexport {inputs as ɵa,outputs as ɵb} from './src/treegrid/treegrid.component';"]}