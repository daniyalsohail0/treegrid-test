{"version":3,"file":"columns.directive.d.ts","sources":["columns.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ViewContainerRef } from '@angular/core';\nimport { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';\n/**\n * `e-column` directive represent a column of the Angular TreeGrid.\n * It must be contained in a TreeGrid component(`ejs-treegrid`).\n * ```html\n * <ejs-treegrid [dataSource]='data' allowPaging='true' allowSorting='true'>\n *   <e-columns>\n *    <e-column field='ID' width='100'></e-column>\n *    <e-column field='name' headerText='Name' width='100'></e-column>\n *   </e-columns>\n * </ejs-treegrid>\n * ```\n */\nexport declare class ColumnDirective extends ComplexBase<ColumnDirective> {\n    private viewContainerRef;\n    directivePropList: any;\n    /**\n     * Defines the data type of the column.\n     * @default null\n     * @blazortype Syncfusion.Blazor.Grids.ColumnType\n     * @blazordefaultvalueignore\n     */\n    type: any;\n    /**\n     * If `allowEditing` set to false, then it disables editing of a particular column.\n     * By default all columns are editable.\n     * @default true\n     */\n    allowEditing: any;\n    /**\n     * If `allowFiltering` set to false, then it disables filtering option and filter bar element of a particular column.\n     * By default all columns are filterable.\n     * @default true\n     */\n    allowFiltering: any;\n    /**\n     * If `allowReordering` set to false, then it disables reorder of a particular column.\n     * By default all columns can be reorder.\n     * @default true\n     */\n    allowReordering: any;\n    /**\n     * If `allowResizing` set to false, it disables resize option of a particular column.\n     * @default true\n     */\n    allowResizing: any;\n    /**\n     * If `allowSorting` set to false, then it disables sorting option of a particular column.\n     * By default all columns are sortable.\n     * @default true\n     */\n    allowSorting: any;\n    /**\n     * Defines the cell content's overflow mode. The available modes are\n     * * `Clip` -  Truncates the cell content when it overflows its area.\n     * * `Ellipsis` -  Displays ellipsis when the cell content overflows its area.\n     * * `EllipsisWithTooltip` - Displays ellipsis when the cell content overflows its area\n     * also it will display tooltip while hover on ellipsis applied cell.\n     * @default Syncfusion.EJ2.Grids.ClipMode.Ellipsis\n     * @isenumeration true\n     * @asptype Syncfusion.EJ2.Grids.ClipMode\n     * @blazortype Syncfusion.Blazor.Grids.ClipMode\n     */\n    clipMode: any;\n    /**\n     * Used to render multiple header rows(stacked headers) on TreeGrid header.\n     * @default null\n     */\n    columns: any;\n    /**\n     * `commands` provides an option to display command buttons in every cell.\n     * The available built-in command buttons are\n     * * Edit - Edit the record.\n     * * Delete - Delete the record.\n     * * Save - Save the record.\n     * * Cancel - Cancel the edit state.\n     *\n     * The following code example implements the custom command column.\n     *```html\n     *<style type=\"text/css\" class=\"cssStyles\">\n     *.details-icon:before\n     *{\n     *   content:\"\\e74d\";\n     *}\n     *</style>\n     *<div id=\"TreeGrid\"></div>\n     *```\n     *```typescript\n     *var gridObj = new TreeGrid({\n     *datasource: window.gridData,\n     *columns : [\n     * { field: 'CustomerID', headerText: 'Customer ID' },\n     * { field: 'CustomerName', headerText: 'Customer Name' },\n     * {commands: [{buttonOption:{content: 'Details', click: onClick, cssClass: details-icon}}], headerText: 'Customer Details'}\n     *]\n     *gridObj.appendTo(\"#TreeGrid\");\n     *```\n     * @default null\n     */\n    commands: any;\n    /**\n     * The CSS styles and attributes of the content cells of a particular column can be customized.\n     * @default null\n     */\n    customAttributes: any;\n    /**\n     * Defines default values for the component when adding a new record to the TreeGrid.\n     * @default null\n     * @blazortype object\n     */\n    defaultValue: any;\n    /**\n     * If `disableHtmlEncode` is set to true, it encodes the HTML of the header and content cells.\n     * @default true\n     */\n    disableHtmlEncode: any;\n    /**\n     * If `displayAsCheckBox` is set to true, it displays the column value as a check box instead of Boolean value.\n     * @default false\n     */\n    displayAsCheckBox: any;\n    /**\n     * Defines the `IEditCell` object to customize default edit cell.\n     * @default {}\n     */\n    edit: any;\n    /**\n     * Defines the type of component for editing.\n     * @default 'stringedit'\n     * @blazortype Syncfusion.Blazor.Grids.EditType\n     * @blazordefaultvalue Syncfusion.Blazor.Grids.EditType.DefaultEdit\n     */\n    editType: any;\n    /**\n     * Defines the field name of column which is mapped with mapping name of DataSource.\n     * The bounded columns can be sort, filter etc.,\n     * The `field` name must be a valid JavaScript identifier,\n     * the first character must be an alphabet and should not contain spaces and special characters.\n     * @default 'undefined'\n     * @blazordefaultvalue ''\n     */\n    field: any;\n    /**\n     *  Defines the filter options to customize filtering for the particular column.\n     *  @default null\n     */\n    filter: any;\n    /**\n     * The `filterBarTemplate` is used to add a custom component instead of default input component for filter bar.\n     * It have create and read functions.\n     * * create: It is used for creating custom components.\n     * * read: It is used to perform custom filter action.\n     *\n     * ```html\n     *<div id=\"TreeGrid\"></div>\n     *```\n     *```typescript\n     *let gridObj: TreeGrid = new TreeGrid({\n     *dataSource: filterData,\n     *columns: [\n     *  { field: 'OrderID', headerText: 'Order ID' },\n     *  {\n     *     field: 'EmployeeID', filterBarTemplate: {\n     *        create: (args: { element: Element, column: Column }) => {\n     *             let input: HTMLInputElement = document.createElement('input');\n     *             input.id = 'EmployeeID';\n     *             input.type = 'text';\n     *             return input;\n     *        },\n     *        write: (args: { element: Element, column: Column }) => {\n     *            args.element.addEventListener('input', args.column.filterBarTemplate.read as EventListener);\n     *        },\n     *        read: (args: { element: HTMLInputElement, columnIndex: number, column: Column }) => {\n     *            gridObj.filterByColumn(args.element.id, 'equal', args.element.value);\n     *       }\n     *    }\n     * }],\n     *  allowFiltering: true\n     *});\n     *gridObj.appendTo('#TreeGrid');\n     *```\n     *\n     * @default null\n     */\n    filterBarTemplate: any;\n    /**\n     * It is used to change display value with the given format and does not affect the original data.\n     * Gets the format from the user which can be standard or custom\n     * [`number`](../../../common/internationalization/#supported-format-string)\n     * and [`date`](../../../common/internationalization/#supported-format-string-1) formats.\n     * @default null\n     * @asptype string\n     * @blazortype string\n     */\n    format: any;\n    /**\n     * Defines the method which is used to achieve custom formatting from an external function.\n     * This function triggers before rendering of each cell.\n     * @default null\n     */\n    formatter: any;\n    /**\n     * Defines the header text of column which is used to display in column header.\n     * If `headerText` is not defined, then field name value will be assigned to header text.\n     * @default 'undefined'\n     */\n    headerText: any;\n    /**\n     * Define the alignment of column header which is used to align the text of column header.\n     * @default null\n     * @aspdefaultvalueignore\n     * @blazordefaultvalueignore\n     * @isenumeration true\n     * @asptype Syncfusion.EJ2.Grids.TextAlign\n     * @blazortype Syncfusion.Blazor.Grids.TextAlign\n     */\n    headerTextAlign: any;\n    /**\n     * Column visibility can change based on [`Media Queries`](http://cssmediaqueries.com/what-are-css-media-queries.html).\n     * `hideAtMedia` accepts only valid Media Queries.\n     * @default 'undefined'\n     */\n    hideAtMedia: any;\n    /**\n     * You can use this property to freeze selected columns in grid.\n     * @default false\n     */\n    isFrozen: any;\n    /**\n     * If `isIdentity` is set to true, then this column is considered as identity column.\n     * @default false\n     */\n    isIdentity: any;\n    /**\n     * If `isPrimaryKey` is set to true, considers this column as the primary key constraint.\n     * @default false\n     */\n    isPrimaryKey: any;\n    /**\n     * If `lockColumn` set to true, then it disables Reordering of a particular column.\n     * The locked column will be moved to first position.\n     * @default false\n     */\n    lockColumn: any;\n    /**\n     * Defines the maximum width of the column in pixels or percentage, which will restrict resizing beyond this pixels or percentage.\n     * @default 'undefined'\n     */\n    maxWidth: any;\n    /**\n     * Defines the minimum width of the column in pixels or percentage.\n     * @default 'undefined'\n     */\n    minWidth: any;\n    /**\n     * If `showCheckbox` set to true, then the checkboxes will be displayed in particular column.\n     * @default false\n     */\n    showCheckbox: any;\n    /**\n     * If `showColumnMenu` set to false, then it disable the column menu of a particular column.\n     * By default column menu will show for all columns\n     * @default true\n     */\n    showColumnMenu: any;\n    /**\n     * If `showInColumnChooser` set to false, then hide the particular column in column chooser.\n     *  By default all columns are displayed in column Chooser.\n     * @default true\n     */\n    showInColumnChooser: any;\n    /**\n     * Defines the sort comparer property.\n     * @default 'undefined'\n     */\n    sortComparer: any;\n    /**\n     * Defines the alignment of the column in both header and content cells.\n     * @default Syncfusion.EJ2.Grids.TextAlign.Left\n     * @isenumeration true\n     * @asptype Syncfusion.EJ2.Grids.TextAlign\n     * @blazortype Syncfusion.Blazor.Grids.TextAlign\n     */\n    textAlign: any;\n    /**\n     * Gets the unique identifier value of the column. It is used to get the object.\n     * @default 'undefined'\n     */\n    uid: any;\n    /**\n     * Defines rules to validate data before creating and updating.\n     * @default null\n     */\n    validationRules: any;\n    /**\n     * Defines the method used to apply custom cell values from external function and display this on each cell rendered.\n     * @default null\n     */\n    valueAccessor: any;\n    /**\n     * If `visible` is set to false, hides the particular column. By default, columns are displayed.\n     * @default true\n     */\n    visible: any;\n    /**\n     * Defines the width of the column in pixels or percentage.\n     * @default 'undefined'\n     */\n    width: any;\n    /**\n     * Defines the column template that renders customized element in each cell of the column.\n     * It accepts either [template string](../../../common/template-engine/) or HTML element ID.\n     * @default null\n     */\n    template: any;\n    /**\n     * Defines the header template as string or HTML element ID which is used to add customized element in the column header.\n     * @default null\n     */\n    headerTemplate: any;\n    filter_itemTemplate: any;\n    /**\n     * Defines the filter template/UI that is used as filter for a particular column.\n     * It accepts either template string or HTML element ID.\n     * @aspignore\n     */\n    filterTemplate: any;\n    commandsTemplate: any;\n    /**\n     * Defines the cell edit template that used as editor for a particular column.\n     * It accepts either template string or HTML element ID.\n     * @aspignore\n     */\n    editTemplate: any;\n    constructor(viewContainerRef: ViewContainerRef);\n}\n/**\n * Column Array Directive\n * @private\n */\nexport declare class ColumnsDirective extends ArrayBase<ColumnsDirective> {\n    constructor();\n}\n"]}