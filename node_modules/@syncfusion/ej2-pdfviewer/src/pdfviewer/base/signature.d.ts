import { PdfViewer } from '../index';
import { PdfViewerBase } from '../index';
import { Dialog } from '@syncfusion/ej2-popups';
/**
 * @hidden
 */
export interface ISignAnnotation {
    strokeColor: string;
    opacity: number;
    bounds: IRectCollection;
    pageIndex: number;
    shapeAnnotationType: string;
    thickness: number;
    id: string;
    data: string;
    signatureName: string;
    fontFamily?: string;
}
/**
 * @hidden
 */
interface IRectCollection {
    left: number;
    top: number;
    width: number;
    height: number;
}
/**
 * @hidden
 */
export declare class Signature {
    private pdfViewer;
    private pdfViewerBase;
    private mouseDetection;
    private oldX;
    private mouseX;
    private oldY;
    private mouseY;
    private newObject;
    /**
     * @private
     */
    outputString: string;
    /**
     * @private
     */
    signatureDialog: Dialog;
    /**
     * @private
     */
    signaturecollection: any;
    /**
     * @private
     */
    outputcollection: any;
    /**
     * @private
     */
    fontName: string;
    private fontsign;
    private signfontStyle;
    private signtypevalue;
    private signfont;
    private signHeight;
    private signWidth;
    private signaturetype;
    private tabObj;
    private isSaveSignature;
    private saveSignatureString;
    /**
     * @private
     */
    saveImageString: string;
    private signatureImageString;
    /**
     * @private
     */
    constructor(pdfViewer: PdfViewer, pdfViewerBase: PdfViewerBase);
    /**
     * @private
     */
    createSignaturePanel(): void;
    private drawSavedSignature;
    private saveSignatureImage;
    /**
     * @private
     */
    addSignature(type?: any): void;
    private addSignatureInPage;
    private typeAddSignature;
    private imageAddSignature;
    /**
     * @private
     */
    hideSignaturePanel(): void;
    private bindTypeSignatureClickEvent;
    private bindDrawSignatureClickEvent;
    private typeSignatureclicked;
    private createSignatureCanvas;
    private handleSelectEvent;
    private uploadSignatureImage;
    private addStampImage;
    private renderSignatureText;
    private typeSignatureclick;
    /**
     * @private
     */
    addSignatureCollection(bounds?: any, position?: any): void;
    /**
     * @private
     */
    RenderSavedSignature(): void;
    /**
     * @private
     */
    updateCanvasSize(): void;
    private signaturePanelMouseDown;
    private enableCreateButton;
    private enableClearbutton;
    private signaturePanelMouseMove;
    private findMousePosition;
    private drawMousePosition;
    private drawSignatureInCanvas;
    private signaturePanelMouseUp;
    private convertToPath;
    private linePath;
    private movePath;
    /**
     * @private
     */
    clearSignatureCanvas(): void;
    /**
     * @private
     */
    closeSignaturePanel(): void;
    /**
     * @private
     */
    saveSignature(): string;
    /**
     * @private
     */
    getRgbCode(colorString: string): any;
    /**
     * @private
     */
    renderSignature(left: number, top: number): void;
    /**
     * @private
     */
    renderExistingSignature(annotationCollection: any, pageIndex: number, isImport: boolean): void;
    /**
     * @private
     */
    storeSignatureData(pageNumber: number, annotations: any): void;
    /**
     * @private
     */
    modifySignatureCollection(property: string, pageNumber: number, annotationBase: any, isSignatureEdited?: boolean): ISignAnnotation;
    /**
     * @private
     */
    storeSignatureCollections(annotation: any, pageNumber: number): void;
    private checkSignatureCollection;
    /**
     * @private
     */
    updateSignatureCollection(signature: any): void;
    /**
     * @private
     */
    addInCollection(pageNumber: number, signature: any): void;
    private getAnnotations;
    private manageAnnotations;
    /**
     * @private
     */
    showSignatureDialog(isShow: boolean): void;
    /**
     * @private
     */
    setAnnotationMode(): void;
    /**
     * @private
     */
    ConvertPointToPixel(number: any): any;
    /**
     * @private
     */
    updateSignatureCollections(signature: any, pageIndex: number, isImport?: boolean): any;
    /**
     * @private
     */
    destroy(): void;
}
export {};
